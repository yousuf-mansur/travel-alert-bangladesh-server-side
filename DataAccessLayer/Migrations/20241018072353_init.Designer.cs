// <auto-generated />
using System;
using DataAccessLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241018072353_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccessLayer.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Entities.BaseCost", b =>
                {
                    b.Property<int>("BaseCostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BaseCostID"));

                    b.Property<decimal>("ActualCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TentativeCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BaseCostID");

                    b.ToTable("BaseCosts");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Booking", b =>
                {
                    b.Property<int>("BookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingID"));

                    b.Property<string>("ApplicationUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCoupleBooking")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfTravelers")
                        .HasColumnType("int");

                    b.Property<int>("PackageID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookingID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("PackageID");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Country", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryID"));

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.CurrentUrl", b =>
                {
                    b.Property<int>("CurrentUrlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CurrentUrlId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CurrentUrlId");

                    b.ToTable("CurrentUrls");

                    b.HasData(
                        new
                        {
                            CurrentUrlId = 1,
                            Title = "API Base URL",
                            Url = "/api"
                        },
                        new
                        {
                            CurrentUrlId = 2,
                            Title = "Dashboard",
                            Url = "/dashboard"
                        },
                        new
                        {
                            CurrentUrlId = 3,
                            Title = "List Users",
                            Url = "/users"
                        },
                        new
                        {
                            CurrentUrlId = 4,
                            Title = "Add User",
                            Url = "/users/add"
                        },
                        new
                        {
                            CurrentUrlId = 5,
                            Title = "Edit User",
                            Url = "/users/edit/:id"
                        },
                        new
                        {
                            CurrentUrlId = 6,
                            Title = "List Categories",
                            Url = "/categories"
                        },
                        new
                        {
                            CurrentUrlId = 7,
                            Title = "Add Category",
                            Url = "/categories/add"
                        },
                        new
                        {
                            CurrentUrlId = 8,
                            Title = "Edit Category",
                            Url = "/categories/edit/:id"
                        },
                        new
                        {
                            CurrentUrlId = 9,
                            Title = "List Sub Categories",
                            Url = "/sub-categories"
                        },
                        new
                        {
                            CurrentUrlId = 10,
                            Title = "Add Sub Category",
                            Url = "/sub-categories/add"
                        },
                        new
                        {
                            CurrentUrlId = 11,
                            Title = "Edit Sub Category",
                            Url = "/sub-categories/edit/:id"
                        },
                        new
                        {
                            CurrentUrlId = 12,
                            Title = "List Countries",
                            Url = "/countries"
                        },
                        new
                        {
                            CurrentUrlId = 13,
                            Title = "Add Country",
                            Url = "/countries/add"
                        },
                        new
                        {
                            CurrentUrlId = 14,
                            Title = "Edit Country",
                            Url = "/countries/edit/:id"
                        },
                        new
                        {
                            CurrentUrlId = 15,
                            Title = "List States",
                            Url = "/states"
                        },
                        new
                        {
                            CurrentUrlId = 16,
                            Title = "Add State",
                            Url = "/states/add"
                        },
                        new
                        {
                            CurrentUrlId = 17,
                            Title = "Edit State",
                            Url = "/states/edit/:id"
                        },
                        new
                        {
                            CurrentUrlId = 18,
                            Title = "List Packages",
                            Url = "/packages"
                        },
                        new
                        {
                            CurrentUrlId = 19,
                            Title = "Add Package",
                            Url = "/packages/add"
                        },
                        new
                        {
                            CurrentUrlId = 20,
                            Title = "Edit Package",
                            Url = "/packages/edit/:id"
                        },
                        new
                        {
                            CurrentUrlId = 21,
                            Title = "Add Package Details",
                            Url = "/packages/details/add/:id"
                        },
                        new
                        {
                            CurrentUrlId = 22,
                            Title = "List Schedules",
                            Url = "/schedules"
                        },
                        new
                        {
                            CurrentUrlId = 23,
                            Title = "Add Schedule",
                            Url = "/schedules/add"
                        },
                        new
                        {
                            CurrentUrlId = 24,
                            Title = "Edit Schedule",
                            Url = "/schedules/edit/:id"
                        },
                        new
                        {
                            CurrentUrlId = 25,
                            Title = "List Tour Vouchers",
                            Url = "/tour-vouchers"
                        },
                        new
                        {
                            CurrentUrlId = 26,
                            Title = "Add Tour Voucher",
                            Url = "/tour-vouchers/add"
                        },
                        new
                        {
                            CurrentUrlId = 27,
                            Title = "Edit Tour Voucher",
                            Url = "/tour-vouchers/edit/:id"
                        },
                        new
                        {
                            CurrentUrlId = 28,
                            Title = "List Students",
                            Url = "/students"
                        },
                        new
                        {
                            CurrentUrlId = 29,
                            Title = "Add Student",
                            Url = "/students/add"
                        },
                        new
                        {
                            CurrentUrlId = 30,
                            Title = "Edit Student",
                            Url = "/students/edit/:id"
                        },
                        new
                        {
                            CurrentUrlId = 31,
                            Title = "More Example Path",
                            Url = "/more/path/example"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.DayCostCategory", b =>
                {
                    b.Property<int>("DayCostCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DayCostCategoryID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DayCostCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("DayCostCategoryID");

                    b.ToTable("DayCostCategory");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.DayWiseTourCost", b =>
                {
                    b.Property<int>("DayWiseTourCostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DayWiseTourCostID"));

                    b.Property<int>("DayCostCategoryID")
                        .HasColumnType("int");

                    b.Property<decimal>("OtherCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PackageID")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCost")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("0");

                    b.HasKey("DayWiseTourCostID");

                    b.HasIndex("DayCostCategoryID");

                    b.HasIndex("PackageID");

                    b.ToTable("DayWiseTourCosts");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Facility", b =>
                {
                    b.Property<int>("FacilityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacilityID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.HasKey("FacilityID");

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.FoodItem", b =>
                {
                    b.Property<int>("FoodItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoodItemID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("FoodItemID");

                    b.ToTable("FoodItems");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Guide", b =>
                {
                    b.Property<int>("GuideID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GuideID"));

                    b.Property<string>("ApplicationUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HomeMobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Passport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermanentAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresentAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferredBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GuideID");

                    b.HasIndex("ApplicationUserID");

                    b.ToTable("Guides");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Hotel", b =>
                {
                    b.Property<int>("HotelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotelCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<int>("StarRating")
                        .HasColumnType("int");

                    b.HasKey("HotelID");

                    b.HasIndex("LocationID");

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.HotelFacility", b =>
                {
                    b.Property<int>("HotelFacilityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelFacilityID"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacilityID")
                        .HasColumnType("int");

                    b.Property<int>("HotelID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("HotelFacilityID");

                    b.HasIndex("FacilityID");

                    b.HasIndex("HotelID");

                    b.ToTable("HotelFacilities");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.HotelImage", b =>
                {
                    b.Property<int>("HotelImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelImageID"));

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("HotelID")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsThumbnail")
                        .HasColumnType("bit");

                    b.HasKey("HotelImageID");

                    b.HasIndex("HotelID");

                    b.ToTable("HotelImages");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationID"));

                    b.Property<string>("LocationDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateID")
                        .HasColumnType("int");

                    b.HasKey("LocationID");

                    b.HasIndex("StateID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.LocationGallery", b =>
                {
                    b.Property<int>("LocationGalleryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationGalleryID"));

                    b.Property<string>("ImageCaption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.HasKey("LocationGalleryID");

                    b.HasIndex("LocationID");

                    b.ToTable("LocationGalleries");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.MealType", b =>
                {
                    b.Property<int>("MealTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MealTypeID"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MealTypeID");

                    b.ToTable("MealTypes");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Package", b =>
                {
                    b.Property<int>("PackageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("PackageCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("PackageDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PackageSubCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("PackageTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PackageID");

                    b.HasIndex("PackageCategoryID");

                    b.HasIndex("PackageSubCategoryID");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PackageAccommodation", b =>
                {
                    b.Property<int>("PackageAccommodationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageAccommodationID"));

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PackageID")
                        .HasColumnType("int");

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PackageAccommodationID");

                    b.HasIndex("PackageID");

                    b.HasIndex("RoomID");

                    b.ToTable("PackageAccommodations");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PackageAccounts", b =>
                {
                    b.Property<int>("PackageAccountsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageAccountsID"));

                    b.Property<int>("PackageID")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAccomodationCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalEarn")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalFoodCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalLoss")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalOtherCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalProfit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalTransPortCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PackageAccountsID");

                    b.HasIndex("PackageID");

                    b.ToTable("PackageAccounts");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PackageBudget", b =>
                {
                    b.Property<int>("PackageBudgetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageBudgetID"));

                    b.Property<decimal>("EstimatedAccomodationCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("EstimatedTransportCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("EstimateedFoodCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OtherCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PackageID")
                        .HasColumnType("int");

                    b.Property<decimal>("ProfitPercent")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PackageBudgetID");

                    b.HasIndex("PackageID");

                    b.ToTable("PackageBudgets");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PackageCategory", b =>
                {
                    b.Property<int>("PackageCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageCategoryID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PackageCategoryID");

                    b.ToTable("PackageCategories");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PackageDetails", b =>
                {
                    b.Property<int>("PackageDetailsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageDetailsID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaximumPerson")
                        .HasColumnType("int");

                    b.Property<int>("MinimumPerson")
                        .HasColumnType("int");

                    b.Property<int>("PackageDuration")
                        .HasColumnType("int");

                    b.Property<int>("PackageID")
                        .HasColumnType("int");

                    b.Property<string>("PickupPoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PackageDetailsID");

                    b.HasIndex("PackageID");

                    b.ToTable("PackageDetails");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PackageExcludes", b =>
                {
                    b.Property<int>("ExcludeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExcludeID"));

                    b.Property<string>("ExcludeDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("PackageID")
                        .HasColumnType("int");

                    b.HasKey("ExcludeID");

                    b.HasIndex("PackageID");

                    b.ToTable("PackageExcludes");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PackageFAQ", b =>
                {
                    b.Property<int>("PackageFAQID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageFAQID"));

                    b.Property<string>("FAQDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FAQTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PackageID")
                        .HasColumnType("int");

                    b.HasKey("PackageFAQID");

                    b.HasIndex("PackageID");

                    b.ToTable("PackageFAQ");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PackageFacility", b =>
                {
                    b.Property<int>("PackageFacilityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageFacilityID"));

                    b.Property<int>("FacilityID")
                        .HasColumnType("int");

                    b.Property<int>("PackageID")
                        .HasColumnType("int");

                    b.HasKey("PackageFacilityID");

                    b.HasIndex("FacilityID");

                    b.HasIndex("PackageID");

                    b.ToTable("PackageFacilities");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PackageFoodItem", b =>
                {
                    b.Property<int>("PackageFoodItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageFoodItemID"));

                    b.Property<int>("FoodItemID")
                        .HasColumnType("int");

                    b.Property<decimal>("FoodQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("FoodUnitPrice")
                        .HasColumnType("float");

                    b.Property<decimal>("ItemTotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MealTypeID")
                        .HasColumnType("int");

                    b.Property<int>("PackageDayNumber")
                        .HasColumnType("int");

                    b.Property<int>("PackageID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduleTime")
                        .HasColumnType("datetime2");

                    b.HasKey("PackageFoodItemID");

                    b.HasIndex("FoodItemID");

                    b.HasIndex("MealTypeID");

                    b.HasIndex("PackageID");

                    b.ToTable("PackageFoodItems");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PackageGallery", b =>
                {
                    b.Property<int>("PackageGalleryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageGalleryID"));

                    b.Property<string>("ImageCaption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<int>("PackageID")
                        .HasColumnType("int");

                    b.HasKey("PackageGalleryID");

                    b.HasIndex("PackageID");

                    b.ToTable("PackageGallery");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PackageIncludes", b =>
                {
                    b.Property<int>("IncludeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncludeID"));

                    b.Property<string>("IncludeDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("PackageID")
                        .HasColumnType("int");

                    b.HasKey("IncludeID");

                    b.HasIndex("PackageID");

                    b.ToTable("PackageIncludes");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PackageLocation", b =>
                {
                    b.Property<int>("PackageLocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageLocationID"));

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<int>("PackageID")
                        .HasColumnType("int");

                    b.HasKey("PackageLocationID");

                    b.HasIndex("LocationID");

                    b.HasIndex("PackageID");

                    b.ToTable("PackageLocation");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PackageSubCategory", b =>
                {
                    b.Property<int>("PackageSubCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageSubCategoryID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PackageCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("SubCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PackageSubCategoryID");

                    b.HasIndex("PackageCategoryID");

                    b.ToTable("PackageSubCategories");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PackageTransportation", b =>
                {
                    b.Property<int>("PackageTransportationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageTransportationID"));

                    b.Property<decimal>("ItemTransportTotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PackageID")
                        .HasColumnType("int");

                    b.Property<string>("PackageTransportationDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("PerHeadTransportCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SeatBooked")
                        .HasColumnType("int");

                    b.Property<int>("TransportationCatagoryID")
                        .HasColumnType("int");

                    b.Property<int>("TransportationID")
                        .HasColumnType("int");

                    b.Property<int>("TransportationTypeID")
                        .HasColumnType("int");

                    b.HasKey("PackageTransportationID");

                    b.HasIndex("PackageID");

                    b.HasIndex("TransportationCatagoryID");

                    b.HasIndex("TransportationID");

                    b.HasIndex("TransportationTypeID");

                    b.ToTable("PackageTransportations");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PackageUser", b =>
                {
                    b.Property<int>("PackageUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageUserID"));

                    b.Property<string>("ApplicationUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("GuideID")
                        .HasColumnType("int");

                    b.Property<int>("PackageID")
                        .HasColumnType("int");

                    b.Property<string>("PackageResponsibility")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PackageUserID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("GuideID");

                    b.HasIndex("PackageID");

                    b.ToTable("PackageUsers");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"));

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BookingID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("FinalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethodID")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatusID")
                        .HasColumnType("int");

                    b.Property<int?>("PromotionID")
                        .HasColumnType("int");

                    b.Property<string>("StripePaymentIntentID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubmittedPromo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentID");

                    b.HasIndex("BookingID");

                    b.HasIndex("PaymentMethodID");

                    b.HasIndex("PaymentStatusID");

                    b.HasIndex("PromotionID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentMethodID"));

                    b.Property<string>("PaymentMethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentMethodID");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PaymentStatus", b =>
                {
                    b.Property<int>("PaymentStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentStatusID"));

                    b.Property<string>("PaymentStatusType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentStatusID");

                    b.ToTable("PaymentStatus");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Promotion", b =>
                {
                    b.Property<int>("PromotionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PromotionID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PromoCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PromotionImageID")
                        .HasColumnType("int");

                    b.Property<string>("PromotionTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PromotionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PromotionID");

                    b.HasIndex("PromotionImageID");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PromotionImage", b =>
                {
                    b.Property<int>("PromotionImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PromotionImageID"));

                    b.Property<string>("PromotionImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PromotionImageID");

                    b.ToTable("PromotionImages");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.RequestUrl", b =>
                {
                    b.Property<int>("RequestUrlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestUrlId"));

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestUrlId");

                    b.ToTable("RequestUrls");

                    b.HasData(
                        new
                        {
                            RequestUrlId = 1,
                            Url = "/api",
                            UrlName = "API Base URL"
                        },
                        new
                        {
                            RequestUrlId = 2,
                            Url = "/dashboard",
                            UrlName = "Dashboard"
                        },
                        new
                        {
                            RequestUrlId = 3,
                            Url = "/users",
                            UrlName = "List Users"
                        },
                        new
                        {
                            RequestUrlId = 4,
                            Url = "/users/add",
                            UrlName = "Add User"
                        },
                        new
                        {
                            RequestUrlId = 5,
                            Url = "/users/edit/:id",
                            UrlName = "Edit User"
                        },
                        new
                        {
                            RequestUrlId = 6,
                            Url = "/categories",
                            UrlName = "List Categories"
                        },
                        new
                        {
                            RequestUrlId = 7,
                            Url = "/categories/add",
                            UrlName = "Add Category"
                        },
                        new
                        {
                            RequestUrlId = 8,
                            Url = "/categories/edit/:id",
                            UrlName = "Edit Category"
                        },
                        new
                        {
                            RequestUrlId = 9,
                            Url = "/sub-categories",
                            UrlName = "List Sub Categories"
                        },
                        new
                        {
                            RequestUrlId = 10,
                            Url = "/sub-categories/add",
                            UrlName = "Add Sub Category"
                        },
                        new
                        {
                            RequestUrlId = 11,
                            Url = "/sub-categories/edit/:id",
                            UrlName = "Edit Sub Category"
                        },
                        new
                        {
                            RequestUrlId = 12,
                            Url = "/countries",
                            UrlName = "List Countries"
                        },
                        new
                        {
                            RequestUrlId = 13,
                            Url = "/countries/add",
                            UrlName = "Add Country"
                        },
                        new
                        {
                            RequestUrlId = 14,
                            Url = "/countries/edit/:id",
                            UrlName = "Edit Country"
                        },
                        new
                        {
                            RequestUrlId = 15,
                            Url = "/states",
                            UrlName = "List States"
                        },
                        new
                        {
                            RequestUrlId = 16,
                            Url = "/states/add",
                            UrlName = "Add State"
                        },
                        new
                        {
                            RequestUrlId = 17,
                            Url = "/states/edit/:id",
                            UrlName = "Edit State"
                        },
                        new
                        {
                            RequestUrlId = 18,
                            Url = "/packages",
                            UrlName = "List Packages"
                        },
                        new
                        {
                            RequestUrlId = 19,
                            Url = "/packages/add",
                            UrlName = "Add Package"
                        },
                        new
                        {
                            RequestUrlId = 20,
                            Url = "/packages/edit/:id",
                            UrlName = "Edit Package"
                        },
                        new
                        {
                            RequestUrlId = 21,
                            Url = "/packages/details/add/:id",
                            UrlName = "Add Package Details"
                        },
                        new
                        {
                            RequestUrlId = 22,
                            Url = "/schedules",
                            UrlName = "List Schedules"
                        },
                        new
                        {
                            RequestUrlId = 23,
                            Url = "/schedules/add",
                            UrlName = "Add Schedule"
                        },
                        new
                        {
                            RequestUrlId = 24,
                            Url = "/schedules/edit/:id",
                            UrlName = "Edit Schedule"
                        },
                        new
                        {
                            RequestUrlId = 25,
                            Url = "/tour-vouchers",
                            UrlName = "List Tour Vouchers"
                        },
                        new
                        {
                            RequestUrlId = 26,
                            Url = "/tour-vouchers/add",
                            UrlName = "Add Tour Voucher"
                        },
                        new
                        {
                            RequestUrlId = 27,
                            Url = "/tour-vouchers/edit/:id",
                            UrlName = "Edit Tour Voucher"
                        },
                        new
                        {
                            RequestUrlId = 28,
                            Url = "/students",
                            UrlName = "List Students"
                        },
                        new
                        {
                            RequestUrlId = 29,
                            Url = "/students/add",
                            UrlName = "Add Student"
                        },
                        new
                        {
                            RequestUrlId = 30,
                            Url = "/students/edit/:id",
                            UrlName = "Edit Student"
                        },
                        new
                        {
                            RequestUrlId = 31,
                            Url = "/more/path/example",
                            UrlName = "More Example Path"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Review", b =>
                {
                    b.Property<int>("ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewID"));

                    b.Property<string>("ApplicationUserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<int>("PackageID")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("ReviewID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("PackageID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Room", b =>
                {
                    b.Property<int>("RoomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomID"));

                    b.Property<decimal>("AveragePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("HotelID")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("MaxOccupancy")
                        .HasColumnType("int");

                    b.Property<int>("RoomSubTypeID")
                        .HasColumnType("int");

                    b.Property<int>("RoomTypeID")
                        .HasColumnType("int");

                    b.HasKey("RoomID");

                    b.HasIndex("HotelID");

                    b.HasIndex("RoomSubTypeID");

                    b.HasIndex("RoomTypeID");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.RoomSubType", b =>
                {
                    b.Property<int>("RoomSubTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomSubTypeID"));

                    b.Property<string>("SubTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomSubTypeID");

                    b.ToTable("RoomSubTypes");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.RoomType", b =>
                {
                    b.Property<int>("RoomTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomTypeID"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomTypeID");

                    b.ToTable("RoomTypes");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Schedule", b =>
                {
                    b.Property<int>("ScheduleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleID"));

                    b.Property<decimal?>("ActualCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ActualTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayCostCategoryID")
                        .HasColumnType("int");

                    b.Property<int>("DayNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PackageID")
                        .HasColumnType("int");

                    b.Property<string>("ScheduleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScheduleTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TentativeCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TentativeTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TourVoucherID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ScheduleID");

                    b.HasIndex("DayCostCategoryID");

                    b.HasIndex("PackageID");

                    b.HasIndex("TourVoucherID");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Seats", b =>
                {
                    b.Property<int>("SeatsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeatsID"));

                    b.Property<int>("PackageTransportationID")
                        .HasColumnType("int");

                    b.Property<string>("SeatsNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeatsID");

                    b.HasIndex("PackageTransportationID");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.State", b =>
                {
                    b.Property<int>("StateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateID"));

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StateID");

                    b.HasIndex("CountryID");

                    b.ToTable("States");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.TourVoucher", b =>
                {
                    b.Property<int>("TourVoucherID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourVoucherID"));

                    b.Property<int?>("PackageID")
                        .HasColumnType("int");

                    b.Property<string>("TourVoucherCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VoucherUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TourVoucherID");

                    b.HasIndex("PackageID");

                    b.ToTable("TourVouchers");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.TransportProvider", b =>
                {
                    b.Property<int>("TransportProviderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransportProviderID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TransportProviderID");

                    b.ToTable("TransportProviders");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Transportation", b =>
                {
                    b.Property<int>("TransportationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransportationID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("TransportProviderID")
                        .HasColumnType("int");

                    b.Property<int?>("TransportationTypeID")
                        .HasColumnType("int");

                    b.HasKey("TransportationID");

                    b.HasIndex("TransportProviderID");

                    b.HasIndex("TransportationTypeID");

                    b.ToTable("Transportation");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.TransportationCatagory", b =>
                {
                    b.Property<int>("TransportationCatagoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransportationCatagoryID"));

                    b.Property<string>("TransportationCatagoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransportationCatagoryID");

                    b.ToTable("TransportationCatagories");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.TransportationType", b =>
                {
                    b.Property<int>("TransportationTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransportationTypeID"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TransportationTypeID");

                    b.ToTable("TransportationTypes");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.UrlService", b =>
                {
                    b.Property<int>("UrlServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UrlServiceId"));

                    b.Property<int>("CurrentUrlId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestUrlId")
                        .HasColumnType("int");

                    b.HasKey("UrlServiceId");

                    b.HasIndex("CurrentUrlId");

                    b.HasIndex("RequestUrlId");

                    b.ToTable("UrlServices");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Booking", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("Bookings")
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Package", "Package")
                        .WithMany("Bookings")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.DayWiseTourCost", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.DayCostCategory", "DayCostCategory")
                        .WithMany("DayWiseTourCosts")
                        .HasForeignKey("DayCostCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Package", "Package")
                        .WithMany("DayWiseTourCosts")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DayCostCategory");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Guide", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Hotel", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Location", "Location")
                        .WithMany("Hotels")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.HotelFacility", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Facility", "Facility")
                        .WithMany("HotelFacilities")
                        .HasForeignKey("FacilityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Hotel", "Hotel")
                        .WithMany("HotelFacilities")
                        .HasForeignKey("HotelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.HotelImage", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Hotel", "Hotel")
                        .WithMany("HotelImages")
                        .HasForeignKey("HotelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Location", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.State", "State")
                        .WithMany("Locations")
                        .HasForeignKey("StateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.LocationGallery", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Location", "Location")
                        .WithMany("LocationGalleries")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Package", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.PackageCategory", "PackageCategory")
                        .WithMany("Packages")
                        .HasForeignKey("PackageCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.PackageSubCategory", "PackageSubCategory")
                        .WithMany("Packages")
                        .HasForeignKey("PackageSubCategoryID");

                    b.Navigation("PackageCategory");

                    b.Navigation("PackageSubCategory");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PackageAccommodation", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Package", "Package")
                        .WithMany("PackageAccommodations")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Room", "Room")
                        .WithMany("PackageAccommodations")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PackageAccounts", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PackageBudget", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PackageDetails", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Package", "Package")
                        .WithMany("PackageDetails")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PackageExcludes", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Package", "Package")
                        .WithMany("PackageExcludes")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PackageFAQ", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Package", "Package")
                        .WithMany("PackageFAQ")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PackageFacility", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Facility", "Facility")
                        .WithMany("PackageFacilities")
                        .HasForeignKey("FacilityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Package", "Package")
                        .WithMany("PackageFacilities")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PackageFoodItem", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.FoodItem", "FoodItem")
                        .WithMany("PackageMenus")
                        .HasForeignKey("FoodItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.MealType", "MealType")
                        .WithMany()
                        .HasForeignKey("MealTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodItem");

                    b.Navigation("MealType");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PackageGallery", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Package", "Package")
                        .WithMany("PackageGallery")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PackageIncludes", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Package", "Package")
                        .WithMany("PackageIncludes")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PackageLocation", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Package", "Package")
                        .WithMany("PackageLocations")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PackageSubCategory", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.PackageCategory", "PackageCategory")
                        .WithMany("PackageSubCategories")
                        .HasForeignKey("PackageCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PackageCategory");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PackageTransportation", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Package", "Package")
                        .WithMany("PackageTransportations")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.TransportationCatagory", "TransportationCatagory")
                        .WithMany("PackageTransportations")
                        .HasForeignKey("TransportationCatagoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Transportation", "Transportation")
                        .WithMany("PackageTransportations")
                        .HasForeignKey("TransportationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.TransportationType", "TransportationType")
                        .WithMany("PackageTransportations")
                        .HasForeignKey("TransportationTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("Transportation");

                    b.Navigation("TransportationCatagory");

                    b.Navigation("TransportationType");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PackageUser", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("PackageUsers")
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Guide", null)
                        .WithMany("PackageGuides")
                        .HasForeignKey("GuideID");

                    b.HasOne("DataAccessLayer.Entities.Package", "Package")
                        .WithMany("PackageUsers")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Payment", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Booking", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.PaymentStatus", "PaymentStatus")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Promotion", "Promotion")
                        .WithMany("Payments")
                        .HasForeignKey("PromotionID");

                    b.Navigation("Booking");

                    b.Navigation("PaymentMethod");

                    b.Navigation("PaymentStatus");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Promotion", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.PromotionImage", "PromotionImage")
                        .WithMany("Promotions")
                        .HasForeignKey("PromotionImageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PromotionImage");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Review", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("Reviews")
                        .HasForeignKey("ApplicationUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Package", "Package")
                        .WithMany("Reviews")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Room", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.RoomSubType", "RoomSubType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomSubTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("RoomSubType");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Schedule", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.DayCostCategory", "DayCostCategory")
                        .WithMany("Schedules")
                        .HasForeignKey("DayCostCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Package", "Package")
                        .WithMany("Schedule")
                        .HasForeignKey("PackageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.TourVoucher", "TourVoucher")
                        .WithMany("Schedules")
                        .HasForeignKey("TourVoucherID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DayCostCategory");

                    b.Navigation("Package");

                    b.Navigation("TourVoucher");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Seats", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.PackageTransportation", "PackageTransportation")
                        .WithMany("Seats")
                        .HasForeignKey("PackageTransportationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PackageTransportation");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.State", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.TourVoucher", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Package", null)
                        .WithMany("TourVouchers")
                        .HasForeignKey("PackageID");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Transportation", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.TransportProvider", "TransportProvider")
                        .WithMany("Transportations")
                        .HasForeignKey("TransportProviderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.TransportationType", null)
                        .WithMany("Transportations")
                        .HasForeignKey("TransportationTypeID");

                    b.Navigation("TransportProvider");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.UrlService", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.CurrentUrl", "CurrentUrl")
                        .WithMany()
                        .HasForeignKey("CurrentUrlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.RequestUrl", "RequestUrl")
                        .WithMany()
                        .HasForeignKey("RequestUrlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentUrl");

                    b.Navigation("RequestUrl");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("PackageUsers");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Booking", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Country", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.DayCostCategory", b =>
                {
                    b.Navigation("DayWiseTourCosts");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Facility", b =>
                {
                    b.Navigation("HotelFacilities");

                    b.Navigation("PackageFacilities");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.FoodItem", b =>
                {
                    b.Navigation("PackageMenus");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Guide", b =>
                {
                    b.Navigation("PackageGuides");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Hotel", b =>
                {
                    b.Navigation("HotelFacilities");

                    b.Navigation("HotelImages");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Location", b =>
                {
                    b.Navigation("Hotels");

                    b.Navigation("LocationGalleries");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Package", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("DayWiseTourCosts");

                    b.Navigation("PackageAccommodations");

                    b.Navigation("PackageDetails");

                    b.Navigation("PackageExcludes");

                    b.Navigation("PackageFAQ");

                    b.Navigation("PackageFacilities");

                    b.Navigation("PackageGallery");

                    b.Navigation("PackageIncludes");

                    b.Navigation("PackageLocations");

                    b.Navigation("PackageTransportations");

                    b.Navigation("PackageUsers");

                    b.Navigation("Reviews");

                    b.Navigation("Schedule");

                    b.Navigation("TourVouchers");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PackageCategory", b =>
                {
                    b.Navigation("PackageSubCategories");

                    b.Navigation("Packages");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PackageSubCategory", b =>
                {
                    b.Navigation("Packages");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PackageTransportation", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PaymentStatus", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Promotion", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PromotionImage", b =>
                {
                    b.Navigation("Promotions");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Room", b =>
                {
                    b.Navigation("PackageAccommodations");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.RoomSubType", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.State", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.TourVoucher", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.TransportProvider", b =>
                {
                    b.Navigation("Transportations");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Transportation", b =>
                {
                    b.Navigation("PackageTransportations");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.TransportationCatagory", b =>
                {
                    b.Navigation("PackageTransportations");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.TransportationType", b =>
                {
                    b.Navigation("PackageTransportations");

                    b.Navigation("Transportations");
                });
#pragma warning restore 612, 618
        }
    }
}
